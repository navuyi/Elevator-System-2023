import { app, BrowserWindow, ipcMain } from 'electron';
import Store from 'electron-store';
import {ELECTRON_STORE_SCHEMA} from "../config/electron-store-schema"


// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string; // <--- [name_of_window.toUpperCase()]_WEBPACK_ENTRY
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string; // <--- [name_of_window.toUpperCase()]_PRELOAD_WEBPACK_ENTRY

declare const DIVA_WEBPACK_ENTRY: string
declare const DIVA_PRELOAD_WEBPACK_ENTRY: string

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = async () : Promise<void> => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 800,
    width: 1200,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      backgroundThrottling: false
    },
    autoHideMenuBar: true,
    fullscreen: false,
    show: false // true,
  });

  mainWindow.maximize()
  mainWindow.show() 
 

  // Create Store listeners
  const store = new Store({schema: ELECTRON_STORE_SCHEMA});

  // IPC listener
  // Use SEND if return value is not expected
  // Use HANDLE if return value is desired
  ipcMain.on('electron-store-get', async (event, val) => {
    event.returnValue = store.get(val);
  });
  ipcMain.on('electron-store-set', async (event, key, val) => {
    store.set(key, val);
  });
  ipcMain.on('electron-store-clear', async (event) => {
    store.clear()
  })
  ipcMain.on('redirect-to-diva', async (event) => {
    await mainWindow.loadURL(DIVA_WEBPACK_ENTRY) // <-- loading diva
  })
  ipcMain.on('redirect-to-menu', async (event) => {
    await mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY)
  })
  ipcMain.on('set-fullscreen', async (event, flag : boolean) => {
    mainWindow.setFullScreen(flag)
  })
  
 
  // and load the index.html of the app.
  await mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY); // <-- loading main_window
  

  // Open the DevTools.
  //mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});
// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

